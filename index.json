{
  "api/Adrenak.AirPeer.APNetwork.html": {
    "href": "api/Adrenak.AirPeer.APNetwork.html",
    "title": "Class APNetwork | AirPeer documentation",
    "keywords": "Class APNetwork Provides access to the WebRTC Network Plugin Inheritance Object APNetwork Namespace : Adrenak.AirPeer Assembly : cs.temp.dll.dll Syntax public class APNetwork : MonoBehaviour, IDisposable Methods Connect(String) Connects to a server using the address Declaration public void Connect(string address) Parameters Type Name Description String address Address of the server to connect to Disconnect(ConnectionId) Disconnects using a ConnectionId Declaration public void Disconnect(ConnectionId id) Parameters Type Name Description ConnectionId id The Id from which to disconnect Dispose() Disposes the internal WebRTC network, then destroys this APNetwork instance Declaration public void Dispose() New(String, String[], String) Creates a new APNetwork instance Declaration public static APNetwork New(string signalingServer, string[] iceServers, string gameObjectName = null) Parameters Type Name Description String signalingServer The signaling server URL String [] iceServers List of ICE server URLs String gameObjectName Optional: Name of the GameObject hosting the new APNetwork Returns Type Description APNetwork SendData(ConnectionId, Byte[], Int32, Int32, Boolean) Sends data over a connection Declaration public void SendData(ConnectionId id, byte[] data, int offset, int len, bool reliable) Parameters Type Name Description ConnectionId id The Id of the connection to send data to Byte [] data The data to be sent Int32 offset Offset from the byte array data Int32 len Length of the data starting Boolean reliable Whether data is sent UDP/TCP style StartServer(String) Starts a server for the given address Declaration public void StartServer(string addr) Parameters Type Name Description String addr Address at which the server will run StopServer() Stops the server (if it's running) Declaration public void StopServer() Events OnConnectionFailed Fired when a connection attempt failed. Declaration public event Action<NetworkEvent> OnConnectionFailed Event Type Type Description Action < NetworkEvent > OnDisconnection Fired when a connection is closed. Called on both server and client Declaration public event Action<NetworkEvent> OnDisconnection Event Type Type Description Action < NetworkEvent > OnMessageReceived Fired when a message is receipted Declaration public event Action<NetworkEvent, bool> OnMessageReceived Event Type Type Description Action < NetworkEvent , Boolean > OnNewConnection Fired when a new connection is formed. Called on both the server and client Declaration public event Action<NetworkEvent> OnNewConnection Event Type Type Description Action < NetworkEvent > OnServerStartFailure Fired when the server fails to start along with the exception Declaration public event Action<NetworkEvent> OnServerStartFailure Event Type Type Description Action < NetworkEvent > OnServerStartSuccess Fired when the server successfully starts Declaration public event Action<NetworkEvent> OnServerStartSuccess Event Type Type Description Action < NetworkEvent > OnServerStopped Fired when the server stops Declaration public event Action<NetworkEvent> OnServerStopped Event Type Type Description Action < NetworkEvent >"
  },
  "api/Adrenak.AirPeer.APNode.html": {
    "href": "api/Adrenak.AirPeer.APNode.html",
    "title": "Class APNode | AirPeer documentation",
    "keywords": "Class APNode An AirPeer Node. Can serve as a server and a client. Inheritance Object APNode Namespace : Adrenak.AirPeer Assembly : cs.temp.dll.dll Syntax public class APNode : IDisposable Constructors APNode(String, String) Constructs a APNode Declaration public APNode(string signalingServer, string apNetworkGameObjectName = null) Parameters Type Name Description String signalingServer Signalling server URL String apNetworkGameObjectName Optional: Name of the APNetwork GameObject APNode(String, String[], String) Constructs a APNode instance Declaration public APNode(string signalingServer, string[] iceServers, string apNetworkGameObjectName = null) Parameters Type Name Description String signalingServer The signalling server URL String [] iceServers List of URLs of ICE servers String apNetworkGameObjectName Optional: Name of the APNetwork GameObject Properties Address The address of the network the node is (i) hosting as a server or (ii) connected to as a client Declaration public string Address { get; } Property Value Type Description String CurrentMode The current mode of the node. The APNode.Mode changes to Idle in error scenarios too, such as when the node fails to become a server, fails to connect to a server. Or when the server is stopped or the client is disconnected. Declaration public APNode.Mode CurrentMode { get; } Property Value Type Description APNode.Mode ID The ID of the node Declaration public short ID { get; } Property Value Type Description Int16 Peers The IDs of other nodes on this network (not including own ID) Declaration public List<short> Peers { get; } Property Value Type Description List < Int16 > Methods Connect(String) Connects to a server using an address Declaration public void Connect(string address) Parameters Type Name Description String address Disconnect() Disconnects from a server (if it's connected) Declaration public void Disconnect() Dispose() Disposes this APNode instance by disposing the internal APNetwork instance and resetting state Declaration public void Dispose() SendPacket(List<Int16>, Packet, Boolean) Sends a packet message to several recipient peers Declaration public void SendPacket(List<short> recipients, Packet packet, bool reliable = false) Parameters Type Name Description List < Int16 > recipients Recipient peer IDs Packet packet The packet containing the message Boolean reliable Whether data is sent UDP/TCP style SendPacket(Int16, Packet, Boolean) Sends a packet message to a recipient peer Declaration public void SendPacket(short recipient, Packet packet, bool reliable = false) Parameters Type Name Description Int16 recipient Recipient peer ID Packet packet The packet containing the message Boolean reliable Whether data is sent UDP/TCP style SendRaw(List<Int16>, Byte[], Boolean) Sends a byte array to several recipient peers Declaration public void SendRaw(List<short> recipients, byte[] bytes, bool reliable = false) Parameters Type Name Description List < Int16 > recipients A list of the recipient peer IDs Byte [] bytes The byte array to send Boolean reliable Whether data is sent UDP/TCP style SendRaw(Int16, Byte[], Boolean) Sends a byte array to a single recipient peer Declaration public void SendRaw(short recipient, byte[] bytes, bool reliable = false) Parameters Type Name Description Int16 recipient The recipient peer ID Byte [] bytes The byte array to send Boolean reliable Whether data is sent UDP/TCP style StartServer(String) Starts the server using the given address. Declaration public void StartServer(string address) Parameters Type Name Description String address StopServer() Stops the server (if it's running) Declaration public void StopServer() Events OnBytesReceived Fired when a byte array message is received Declaration public event Action<short, byte[]> OnBytesReceived Event Type Type Description Action < Int16 , Byte []> OnClientJoined Fired when a new client joins the network Declaration public event Action<short> OnClientJoined Event Type Type Description Action < Int16 > OnClientLeft Fired when a client leaves the network Declaration public event Action<short> OnClientLeft Event Type Type Description Action < Int16 > OnConnected Fired when this node is connected to a server. Called on the node that attempts to connect to a server. Declaration public event Action OnConnected Event Type Type Description Action OnConnectionFailed Fired when this node fails to connect. Called on the node trying to connect to a server. Declaration public event Action<Exception> OnConnectionFailed Event Type Type Description Action < Exception > OnDisconnected Fired when this node is disconnected. Called on a client node after it tries to disconnect, Declaration public event Action OnDisconnected Event Type Type Description Action OnPacketReceived Fired when a packet message is received Declaration public event Action<short, Packet> OnPacketReceived Event Type Type Description Action < Int16 , Packet > OnReceiveID Fired when this node is assigned an ID Declaration public event Action<short> OnReceiveID Event Type Type Description Action < Int16 > OnRemoteServerClosed Fired when the server a client node was connected to is stopped. Called on client node. Declaration public event Action OnRemoteServerClosed Event Type Type Description Action OnServerStartFailure Fired when the server fails to start along with the exception. Declaration public event Action<Exception> OnServerStartFailure Event Type Type Description Action < Exception > OnServerStartSuccess Fired when the server successfully starts Declaration public event Action OnServerStartSuccess Event Type Type Description Action OnServerStop Fired when the server stops. Called on a node that was hosting a server. Declaration public event Action OnServerStop Event Type Type Description Action"
  },
  "api/Adrenak.AirPeer.APNode.Mode.html": {
    "href": "api/Adrenak.AirPeer.APNode.Mode.html",
    "title": "Enum APNode.Mode | AirPeer documentation",
    "keywords": "Enum APNode.Mode Describes the possible modes of APNode Namespace : Adrenak.AirPeer Assembly : cs.temp.dll.dll Syntax public enum Mode Fields Name Description Client State when the node is connected to a server Idle State when the node is neither a server (ie. hosting a network) or a client (ie. connected to a server hosting a network). Server State when the node is hosting a network at an address."
  },
  "api/Adrenak.AirPeer.BytesReader.html": {
    "href": "api/Adrenak.AirPeer.BytesReader.html",
    "title": "Class BytesReader | AirPeer documentation",
    "keywords": "Class BytesReader A utility to read objects from a byte array Inheritance Object BytesReader Namespace : Adrenak.AirPeer Assembly : cs.temp.dll.dll Syntax public class BytesReader Constructors BytesReader(Byte[]) Declaration public BytesReader(byte[] payload) Parameters Type Name Description Byte [] payload Properties Index Declaration public int Index { get; } Property Value Type Description Int32 Methods ReadByte(out Byte) Declaration public bool ReadByte(out byte result) Parameters Type Name Description Byte result Returns Type Description Boolean ReadByteArray() Declaration public byte[] ReadByteArray() Returns Type Description Byte [] ReadBytes(Int32) Declaration public byte[] ReadBytes(int length) Parameters Type Name Description Int32 length Returns Type Description Byte [] ReadChar() Declaration public char ReadChar() Returns Type Description Char ReadColor() Declaration public Color ReadColor() Returns Type Description Color ReadColor32() Declaration public Color32 ReadColor32() Returns Type Description Color32 ReadColor32Array() Declaration public Color32[] ReadColor32Array() Returns Type Description Color32 [] ReadColorArray() Declaration public Color[] ReadColorArray() Returns Type Description Color [] ReadDouble() Declaration public double ReadDouble() Returns Type Description Double ReadDoubleArray() Declaration public double[] ReadDoubleArray() Returns Type Description Double [] ReadFloat() Declaration public float ReadFloat() Returns Type Description Single ReadFloatArray() Declaration public float[] ReadFloatArray() Returns Type Description Single [] ReadInt() Declaration public int ReadInt() Returns Type Description Int32 ReadIntArray() Declaration public int[] ReadIntArray() Returns Type Description Int32 [] ReadLong() Declaration public long ReadLong() Returns Type Description Int64 ReadLongArray() Declaration public long[] ReadLongArray() Returns Type Description Int64 [] ReadRect() Declaration public Rect ReadRect() Returns Type Description Rect ReadRectArray() Declaration public Rect[] ReadRectArray() Returns Type Description Rect [] ReadShort() Declaration public short ReadShort() Returns Type Description Int16 ReadShortArray() Declaration public short[] ReadShortArray() Returns Type Description Int16 [] ReadString() Declaration public string ReadString() Returns Type Description String ReadVector2() Declaration public Vector2 ReadVector2() Returns Type Description Vector2 ReadVector2Array() Declaration public Vector2[] ReadVector2Array() Returns Type Description Vector2 [] ReadVector3() Declaration public Vector3 ReadVector3() Returns Type Description Vector3 ReadVector3Array() Declaration public Vector3[] ReadVector3Array() Returns Type Description Vector3 []"
  },
  "api/Adrenak.AirPeer.BytesWriter.html": {
    "href": "api/Adrenak.AirPeer.BytesWriter.html",
    "title": "Class BytesWriter | AirPeer documentation",
    "keywords": "Class BytesWriter A utility to write objects into a byte array Inheritance Object BytesWriter Namespace : Adrenak.AirPeer Assembly : cs.temp.dll.dll Syntax public class BytesWriter Constructors BytesWriter() Declaration public BytesWriter() Properties Bytes Declaration public byte[] Bytes { get; } Property Value Type Description Byte [] Methods WriteByte(Byte) Declaration public void WriteByte(byte b) Parameters Type Name Description Byte b WriteByteArray(Byte[]) Declaration public void WriteByteArray(byte[] bytes) Parameters Type Name Description Byte [] bytes WriteBytes(Byte[]) Declaration public void WriteBytes(byte[] block) Parameters Type Name Description Byte [] block WriteChar(Char) Declaration public BytesWriter WriteChar(char val) Parameters Type Name Description Char val Returns Type Description BytesWriter WriteColor(Color) Declaration public BytesWriter WriteColor(Color color) Parameters Type Name Description Color color Returns Type Description BytesWriter WriteColor32(Color32) Declaration public BytesWriter WriteColor32(Color32 color) Parameters Type Name Description Color32 color Returns Type Description BytesWriter WriteColor32Array(Color32[]) Declaration public BytesWriter WriteColor32Array(Color32[] array) Parameters Type Name Description Color32 [] array Returns Type Description BytesWriter WriteColorArray(Color[]) Declaration public BytesWriter WriteColorArray(Color[] array) Parameters Type Name Description Color [] array Returns Type Description BytesWriter WriteDouble(Double) Declaration public BytesWriter WriteDouble(double value) Parameters Type Name Description Double value Returns Type Description BytesWriter WriteDoubleArray(Double[]) Declaration public BytesWriter WriteDoubleArray(double[] array) Parameters Type Name Description Double [] array Returns Type Description BytesWriter WriteFloat(Single) Declaration public BytesWriter WriteFloat(float value) Parameters Type Name Description Single value Returns Type Description BytesWriter WriteFloatArray(Single[]) Declaration public BytesWriter WriteFloatArray(float[] array) Parameters Type Name Description Single [] array Returns Type Description BytesWriter WriteInt(Int32) Declaration public BytesWriter WriteInt(int value) Parameters Type Name Description Int32 value Returns Type Description BytesWriter WriteIntArray(Int32[]) Declaration public BytesWriter WriteIntArray(int[] array) Parameters Type Name Description Int32 [] array Returns Type Description BytesWriter WriteLong(Int64) Declaration public BytesWriter WriteLong(long value) Parameters Type Name Description Int64 value Returns Type Description BytesWriter WriteLongArray(Int64[]) Declaration public BytesWriter WriteLongArray(long[] array) Parameters Type Name Description Int64 [] array Returns Type Description BytesWriter WriteRect(Rect) Declaration public BytesWriter WriteRect(Rect rect) Parameters Type Name Description Rect rect Returns Type Description BytesWriter WriteRectArray(Rect[]) Declaration public BytesWriter WriteRectArray(Rect[] array) Parameters Type Name Description Rect [] array Returns Type Description BytesWriter WriteShort(Int16) Declaration public BytesWriter WriteShort(short value) Parameters Type Name Description Int16 value Returns Type Description BytesWriter WriteShortArray(Int16[]) Declaration public BytesWriter WriteShortArray(short[] array) Parameters Type Name Description Int16 [] array Returns Type Description BytesWriter WriteString(String) Declaration public BytesWriter WriteString(string str) Parameters Type Name Description String str Returns Type Description BytesWriter WriteVector2(Vector2) Declaration public BytesWriter WriteVector2(Vector2 value) Parameters Type Name Description Vector2 value Returns Type Description BytesWriter WriteVector2Array(Vector2[]) Declaration public BytesWriter WriteVector2Array(Vector2[] array) Parameters Type Name Description Vector2 [] array Returns Type Description BytesWriter WriteVector3(Vector3) Declaration public BytesWriter WriteVector3(Vector3 value) Parameters Type Name Description Vector3 value Returns Type Description BytesWriter WriteVector3Array(Vector3[]) Declaration public BytesWriter WriteVector3Array(Vector3[] array) Parameters Type Name Description Vector3 [] array Returns Type Description BytesWriter"
  },
  "api/Adrenak.AirPeer.EndianUtility.html": {
    "href": "api/Adrenak.AirPeer.EndianUtility.html",
    "title": "Class EndianUtility | AirPeer documentation",
    "keywords": "Class EndianUtility The utility used by BytesReader and BytesWriter for reading and writing bytes. Inheritance Object EndianUtility Namespace : Adrenak.AirPeer Assembly : cs.temp.dll.dll Syntax public static class EndianUtility Properties RequiresEndianCorrection Declaration public static bool RequiresEndianCorrection { get; } Property Value Type Description Boolean Methods EndianCorrection(Byte[]) Declaration public static void EndianCorrection(byte[] bytes) Parameters Type Name Description Byte [] bytes"
  },
  "api/Adrenak.AirPeer.html": {
    "href": "api/Adrenak.AirPeer.html",
    "title": "Namespace Adrenak.AirPeer | AirPeer documentation",
    "keywords": "Namespace Adrenak.AirPeer Classes APNetwork Provides access to the WebRTC Network Plugin APNode An AirPeer Node. Can serve as a server and a client. BytesReader A utility to read objects from a byte array BytesWriter A utility to write objects into a byte array EndianUtility The utility used by BytesReader and BytesWriter for reading and writing bytes. Message Data structure representing how messages are send in AirPeer. Packet Wraps a byte[] to provide a higher level object representing network data. Structs Packet.ReservedTags A collection of tags that AirPeer uses for internal communication within different nodes. DO NOT change these. Enums APNode.Mode Describes the possible modes of APNode"
  },
  "api/Adrenak.AirPeer.Message.html": {
    "href": "api/Adrenak.AirPeer.Message.html",
    "title": "Class Message | AirPeer documentation",
    "keywords": "Class Message Data structure representing how messages are send in AirPeer. Inheritance Object Message Namespace : Adrenak.AirPeer Assembly : cs.temp.dll.dll Syntax public class Message Fields bytes Byte array representing the data the message object contains Declaration public byte[] bytes Field Value Type Description Byte [] recipients IDs of the intended recipients of the message Declaration public short[] recipients Field Value Type Description Int16 [] sender ID of the sender of the message Declaration public short sender Field Value Type Description Int16 Methods Deserialize(Byte[]) Constructs a Message from a byte array Declaration public static Message Deserialize(byte[] bytes) Parameters Type Name Description Byte [] bytes The byte array representing the data Returns Type Description Message Message if deserialization was successful, else null Serialize() Serializes Message instance into a byte array Declaration public byte[] Serialize() Returns Type Description Byte [] Returns byte array if successful else exception ToString() Returns string representation of the instance Declaration public override string ToString() Returns Type Description String The string representation Overrides Object.ToString()"
  },
  "api/Adrenak.AirPeer.Packet.html": {
    "href": "api/Adrenak.AirPeer.Packet.html",
    "title": "Class Packet | AirPeer documentation",
    "keywords": "Class Packet Wraps a byte[] to provide a higher level object representing network data. Inheritance Object Packet Namespace : Adrenak.AirPeer Assembly : cs.temp.dll.dll Syntax public class Packet Constructors Packet() Constructs a new packet with no tag and no payload data. Declaration public Packet() Properties HasNoPayload Whether the packet contains any payload data or not Declaration public bool HasNoPayload { get; } Property Value Type Description Boolean HasNoTag Whether the packet has a tag or not Declaration public bool HasNoTag { get; } Property Value Type Description Boolean Payload The actual byte[] data that the packet represents Declaration public byte[] Payload { get; } Property Value Type Description Byte [] Tag A string tag that can be used to cetegorize or identify the packet. Declaration public string Tag { get; } Property Value Type Description String Methods Deserialize(Byte[]) Constructs a Packet from a byte array Declaration public static Packet Deserialize(byte[] bytes) Parameters Type Name Description Byte [] bytes Packet as byte array Returns Type Description Packet Packet if deserialization was successful, else null Serialize() Serializes Packet instance into a byte array Declaration public byte[] Serialize() Returns Type Description Byte [] Byte array if successful else throws exception ToString() Returns string representation of the instance Declaration public override string ToString() Returns Type Description String The string representation Overrides Object.ToString() With(String, Byte[]) A builder method that allows setting tag and byte array payload Declaration public Packet With(string tag, byte[] payload) Parameters Type Name Description String tag The tag to be set Byte [] payload The byte array to be set as payload Returns Type Description Packet Returns itself for builder method chaining With(String, String) A builder method that allows setting tag and string payload Declaration public Packet With(string tag, string payload) Parameters Type Name Description String tag The tag to be set String payload The string to be set as payload Returns Type Description Packet Returns itself for builder method chaining WithPayload(Byte[]) A builder method that allows setting the byte array payload Declaration public Packet WithPayload(byte[] payload) Parameters Type Name Description Byte [] payload The byte array to be set as payload Returns Type Description Packet Returns itself for builder method chaining WithPayload(String) A builder method that allows setting the string payload Declaration public Packet WithPayload(string payload) Parameters Type Name Description String payload The string to be set as payload Returns Type Description Packet Returns itself for builder method chaining WithTag(String) A builder method that allows setting the tag Declaration public Packet WithTag(string tag) Parameters Type Name Description String tag The tag to be set Returns Type Description Packet Returns itself for builder method chaining"
  },
  "api/Adrenak.AirPeer.Packet.ReservedTags.html": {
    "href": "api/Adrenak.AirPeer.Packet.ReservedTags.html",
    "title": "Struct Packet.ReservedTags | AirPeer documentation",
    "keywords": "Struct Packet.ReservedTags A collection of tags that AirPeer uses for internal communication within different nodes. DO NOT change these. Namespace : Adrenak.AirPeer Assembly : cs.temp.dll.dll Syntax public struct ReservedTags Fields ClientJoined Declaration public const string ClientJoined = \"reserved.client.joined\" Field Value Type Description String ClientLeft Declaration public const string ClientLeft = \"reserved.client.left\" Field Value Type Description String ClientSetID Declaration public const string ClientSetID = \"reserved.client.setID\" Field Value Type Description String ServerClosed Declaration public const string ServerClosed = \"reserved.server.stopped\" Field Value Type Description String"
  },
  "api/Adrenak.AirPeer.Samples.APNodeDemo.html": {
    "href": "api/Adrenak.AirPeer.Samples.APNodeDemo.html",
    "title": "Class APNodeDemo | AirPeer documentation",
    "keywords": "Class APNodeDemo A simple demo scene that allows multiple nodes to form a network and exchange messages using an immediate mode GUI. Inheritance Object APNodeDemo Namespace : Adrenak.AirPeer.Samples Assembly : cs.temp.dll.dll Syntax public class APNodeDemo : MonoBehaviour Fields signalingServerURL Declaration public string signalingServerURL Field Value Type Description String"
  },
  "api/Adrenak.AirPeer.Samples.BytesReaderWriterDemo.html": {
    "href": "api/Adrenak.AirPeer.Samples.BytesReaderWriterDemo.html",
    "title": "Class BytesReaderWriterDemo | AirPeer documentation",
    "keywords": "Class BytesReaderWriterDemo A demo showing writing and reading of data using BytesWriter and BytesReader Inheritance Object BytesReaderWriterDemo Namespace : Adrenak.AirPeer.Samples Assembly : cs.temp.dll.dll Syntax public class BytesReaderWriterDemo : MonoBehaviour"
  },
  "api/Adrenak.AirPeer.Samples.FrameCountStreamingDemo.html": {
    "href": "api/Adrenak.AirPeer.Samples.FrameCountStreamingDemo.html",
    "title": "Class FrameCountStreamingDemo | AirPeer documentation",
    "keywords": "Class FrameCountStreamingDemo A demo script that shows a constant stream of data sent from the server to all the clients. Inheritance Object FrameCountStreamingDemo Namespace : Adrenak.AirPeer.Samples Assembly : cs.temp.dll.dll Syntax public class FrameCountStreamingDemo : MonoBehaviour Fields inputField Declaration public InputField inputField Field Value Type Description InputField msg1 Declaration public Text msg1 Field Value Type Description Text msg2 Declaration public Text msg2 Field Value Type Description Text signalingServer Declaration public string signalingServer Field Value Type Description String Methods Connect() Declaration public void Connect() Disconnect() Declaration public void Disconnect() StartServer() Declaration public void StartServer()"
  },
  "api/Adrenak.AirPeer.Samples.html": {
    "href": "api/Adrenak.AirPeer.Samples.html",
    "title": "Namespace Adrenak.AirPeer.Samples | AirPeer documentation",
    "keywords": "Namespace Adrenak.AirPeer.Samples Classes APNodeDemo A simple demo scene that allows multiple nodes to form a network and exchange messages using an immediate mode GUI. BytesReaderWriterDemo A demo showing writing and reading of data using BytesWriter and BytesReader FrameCountStreamingDemo A demo script that shows a constant stream of data sent from the server to all the clients."
  },
  "index.html": {
    "href": "index.html",
    "title": "AirPeer | AirPeer documentation",
    "keywords": "AirPeer A WebRTC based networking plugin for Unity3D. AirPeer allows Unity applications to communicate in a peer to peer manner using WebRTC technology . Built on top of Christoph Kutza's WebRTC Network project with added features such as Differentiating peers into server and clients to form star networks with server at the center. For client to client communication (via server). Event based API. Message (de)serialization features. Installation AirPeer is distributed as a UPM package. There are many ways to install AirPeer. Here are 5 of them: Click to see more. Packages>manifest.json file Easiest method for most people. Ensure you have NPMJS registry in manifest.json inside the \"scopedRegistries\" object and under the scopes com.adrenak.airpeer is added. Then add the package as a project dependency. Make sure \"dependencies\" array has this the package name. If done right your manifest.json should resemble this. Substitute x.x.x with the version of AirPeer that you want in your project : { \"dependencies\": { \"com.adrenak.airpeer\": \"x.x.x\" <<other dependencies of your project>> }, \"scopedRegistries\": [ { \"name\": \"npmjs\", \"url\": \"https://registry.npmjs.com\", \"scopes\": [ \"com.adrenak.airpeer\", <<other packages from npmjs registry>> ] }, <<Other scoped registries, if any>> ] } Git clone method. Clone this repository. Then do either of these Copy Assets/Adrenak.AirPeer into your projects Assets or Packages folder Checkout the upm branch in the cloned repository using git checkout upm . Go to Unity>Window>Package Manager. Click on the + button in the top left corner>Add package from disk... and select Assets/Adrenak.AirPeer/package.json inside the cloned repository. This approach also allows you to change the version of AirPeer by doing a git checkout inside the cloned repository to a specific version and also lets you fetch the latest updates using git pull origin upm . If you know basic git and don't know much about upm, this is a good approach. OpenUPM: AirPeer is available on NPM and OpenUPM registries. If you're using the OpenUPM CLI type any of these in the terminal: openupm add com.adrenak.airpeer which will install it using the OpenUPM registry openupm add --registry https://registry.npmjs.com com.adrenak.airpeer which will install it using the NPM registry. If you know UPM and use OpenUPM CLI, this method is the best. Via Git URL in Unity Package Manager: Press the + button in package manager and add the URL https://github.com/adrenak/airpeer.git#upm . Github releases: Go to https://github.com/adrenak/airpeer/tags and click on any upm/x.x.x where x.x.x is the version of AirPeer. You can download the zip and extract inside your projects Packages folder. Documentation Manual and tutorials is WIP. In the meantime, please refer to codedoc generated documentation here . Samples AirPeers comes with a couple of handy samples that show how you can connect to a WebRTC network and exchange messages. To import samples, go to Window>Package Manager. Find Adrenak.AirPeer and install Samples from the options on the right hand side of the window. Signalling Server A Signalling server implementation can be found in the AirSignal repository. The samples in the AirPeer repository use an IP:Port that I am hosting, but it is neither garunteed to be online nor secure. It is HIGHLY advised that you run AirSignal (or your own WebRTC signalling server implementation) on your own server and don't rely on my server. AirSignal can also be run locally localhost for easier testing. Editor testing Use ParellSync to use the samples within the Unity editor. Contact This repository is made by Vatsal Ambastha and is under the MIT license. Feel free to get in touch for helping support this project or commercial consultation/development for your own projects. @github @website @twitter"
  }
}